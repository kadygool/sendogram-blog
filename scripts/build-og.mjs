import { createCanvas } from 'canvas';
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
function wrapText(ctx, text, maxWidth, lineHeight) {
  const words = text.split(' ');
  const lines = [];
  let currentLine = words[0];

  for (let i = 1; i < words.length; i++) {
    const word = words[i];
    const width = ctx.measureText(currentLine + ' ' + word).width;
    if (width < maxWidth) {
      currentLine += ' ' + word;
    } else {
      lines.push(currentLine);
      currentLine = word;
    }
  }
  lines.push(currentLine);

  return {
    lines,
    totalHeight: lines.length * lineHeight,
  };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OG-–∫–∞—Ä—Ç–∏–Ω–∫–∏
function generateOGImage({ title, subtitle, filename }) {
  const width = 1200;
  const height = 630;
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext('2d');

  // –§–æ–Ω (–≥—Ä–∞–¥–∏–µ–Ω—Ç)
  const gradient = ctx.createLinearGradient(0, 0, width, height);
  gradient.addColorStop(0, '#4f46e5');
  gradient.addColorStop(1, '#7c3aed');
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);

  // –ü–∞—Ç—Ç–µ—Ä–Ω (–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
  ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
  ctx.lineWidth = 2;
  for (let i = 0; i < 10; i++) {
    ctx.beginPath();
    ctx.arc(
      Math.random() * width,
      Math.random() * height,
      Math.random() * 100 + 50,
      0,
      Math.PI * 2
    );
    ctx.stroke();
  }

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫
  ctx.fillStyle = '#ffffff';
  ctx.font = 'bold 72px sans-serif';
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';

  const titleWrapped = wrapText(ctx, title, width - 100, 80);
  const startY = height / 2 - titleWrapped.totalHeight / 2;

  titleWrapped.lines.forEach((line, index) => {
    ctx.fillText(line, width / 2, startY + index * 80);
  });

  // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
  if (subtitle) {
    ctx.font = '32px sans-serif';
    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
    ctx.fillText(subtitle, width / 2, height - 80);
  }

  // –õ–æ–≥–æ—Ç–∏–ø/–±—Ä–µ–Ω–¥
  ctx.font = 'bold 36px sans-serif';
  ctx.fillStyle = '#ffffff';
  ctx.fillText('Sendogram', width / 2, 60);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  const buffer = canvas.toBuffer('image/png');
  const outputPath = join('public/og', filename);
  
  if (!existsSync('public/og')) {
    mkdirSync('public/og', { recursive: true });
  }
  
  writeFileSync(outputPath, buffer);
  console.log(`‚úÖ OG-–∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${outputPath}`);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
function main() {
  console.log('üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OG-–∫–∞—Ä—Ç–∏–Ω–æ–∫...');

  // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
  generateOGImage({
    title: 'Sendogram',
    subtitle: '–ë–ª–æ–≥ –æ Telegram-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ',
    filename: 'default.png',
  });

  // –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ—Å—Ç–æ–≤
  generateOGImage({
    title: '–ê–Ω—Ç–∏-–±–∞–Ω —Ç–∞–π–º–∏–Ω–≥–∏ –≤ Telegram',
    subtitle: '–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ',
    filename: 'anti-ban-timings.png',
  });

  generateOGImage({
    title: '–ü–µ—Ä–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞ 5 –º–∏–Ω—É—Ç',
    subtitle: '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç',
    filename: 'first-campaign.png',
  });

  console.log('‚ú® –í—Å–µ OG-–∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!');
}

main();
